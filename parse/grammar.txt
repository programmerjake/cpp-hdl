/**
 * Copyright 2018 Jacob Lifshay
 *
 * This file is part of Cpp-HDL.
 *
 * Cpp-HDL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Cpp-HDL is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Cpp-HDL.  If not, see <http://www.gnu.org/licenses/>.
 */

TopLevelModule : Import* Module;

Import : "import" ID ";";

Module : "module" ID TemplateParameters? ("implements" Type)? "{" Statement* "}";

TemplateParameters : "{" ( TemplateParameter ("," TemplateParameter)* )? "}";

TemplateParameter : "type" ID ("implements" Type)? "..."?
                  | ID ":" Type "..."?;

Interface : "interface" ID TemplateParameters? ("implements" Type)? "{" Statement* "}";

Enum : "enum" ID ":" Type "{" (EnumPart ("," EnumPart)*) ","? "}";

EnumPart : ID "=" Expression;

Function : "function" ID TemplateParameters? "(" (FunctionParameter ("," FunctionParameter)*)? ")" (":" Type)? "{" Statement* "}";

FunctionParameter : ID ":" Type;

Statement : Module
          | Interface
          | Enum
          | Function
          | "type" ID "=" Type ";"
          | "const" ConstStatementPart ("," ConstStatementPart)* ";"
          | "let" LetStatementPart ("," LetStatementPart)* ";"
          | ("input" | "output") InputOutputStatementPart ("," InputOutputStatementPart)* ";"
          | "reg" RegStatementPart ("," RegStatementPart)* ";"
          | "if" "(" Expression ")" Statement ("else" Statement)
          | "for" "(" ID "in" Expression ("to" Expression)? ")" Statement
          | "for" "(" "type" ID "in" ScopedId ")" Statement
          | "match" "(" Expression ")" "{" MatchStatementPart* "}"
          | Expression ";"
          | "{" Statement* "}"
          | "return" Expression? ";"
          | "break" ";"
          | "continue" ";"
          | ";";

ConstStatementPart : ID "=" Expression;

MatchStatementPart : MatchPattern "=>" Statement;

MatchPattern : Expression ("to" Expression)?
             | NUMBER_PATTERN;

LetStatementPart : LetStatementName ("," LetStatementName)* ":" Type;

LetStatementName : ID;

InputOutputStatementPart : InputOutputStatementName ("," InputOutputStatementName)* ":" Type;

InputOutputStatementName : ID;

RegStatementPart : RegStatementName ("," RegStatementName)* ":" Type
                 | RegStatementName "=" Expression;

RegStatementName : ID;

Expression : ScopedId
           | NUMBER
           | "(" Expression ")"
           | "{" (Expression ",")* (Expression ","?)? "}"
           | Expression "(" (Expression ("," Expression)*)? ")"
           | "cast" "{" Type "}" "(" Expression ")"
           | "!" Expression
           | "~" Expression
           | "+" Expression
           | "-" Expression
           | "&" Expression
           | "|" Expression
           | "^" Expression
           | Expression "&&" Expression
           | Expression "||" Expression
           | Expression "&" Expression
           | Expression "|" Expression
           | Expression "^" Expression
           | Expression "<<" Expression
           | Expression ">>" Expression
           | Expression "==" Expression
           | Expression "!=" Expression
           | Expression "<=" Expression
           | Expression ">=" Expression
           | Expression "<" Expression
           | Expression ">" Expression
           | Expression "+" Expression
           | Expression "-" Expression
           | Expression "*" Expression
           | Expression "/" Expression
           | Expression "%" Expression
           | Expression "?" Expression ":" Expression
           | "fill" "(" Expression "," Expression ")"
           | "cat" "(" Expression ("," Expression)* ")"
           | "popCount" "(" Expression ")"
           | Expression "[" Expression ( "from" Expression )? "]"
           | Expression "=" Expression
           | Expression "<->" Expression;

ScopedId : "::"? ID TemplateArguments? ("::" ID TemplateArguments?)*;

TemplateArguments : "{" (TemplateArgument ("," TemplateArgument)*)? "}";

TemplateArgument : "type" Type
                 | Expression;

Type : ScopedId
     | "flip" Type
     | "typeOf" "(" Expression ")"
     | "uint" "{" Expression "}"
     | "sint" "{" Expression "}"
     | "u8"
     | "u16"
     | "u32"
     | "u64"
     | "s8"
     | "s16"
     | "s32"
     | "s64"
     | "bit"
     | "s1"
     | "u1"
     | "memory" Expression "of" Type
     | "{" (Type ",")* (Type ","?)? "}"
     | "function" "(" ((ID ":")? Type ("," (ID ":")? Type)*)? ")" (":" Type)? "{" Statement* "}";
